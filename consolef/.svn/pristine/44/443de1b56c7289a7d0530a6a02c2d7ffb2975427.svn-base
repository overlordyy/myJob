package com.vns.controller;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.web3j.abi.FunctionReturnDecoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.Utils;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.methods.response.EthBlock;
import org.web3j.protocol.core.methods.response.EthBlock.Block;
import org.web3j.protocol.core.methods.response.EthBlock.TransactionObject;
import org.web3j.protocol.core.methods.response.EthBlock.TransactionResult;
import org.web3j.protocol.core.methods.response.EthBlockNumber;
import org.web3j.protocol.core.methods.response.EthGetBalance;
import org.web3j.protocol.http.HttpService;
import org.web3j.protocol.vns.VnsWeb3j;

import rx.Subscription;

import com.vns.vo.BlockInfo;
import com.vns.vo.TransactionInfo;

public class test {

	public static Subscription subscription;
	public static void main(String[] args) {
		VnsWeb3j vnsWeb3j = VnsWeb3j.build(new HttpService("http://132.232.166.46:8585/"));
		try {
			EthGetBalance ethGetBalance = vnsWeb3j.ethGetBalance("0x1C4749A6e7082aac17083029c9eb2DCe4045d912", DefaultBlockParameter.valueOf("latest")).send();
			String balance = ethGetBalance.getBalance().toString();
			EthBlockNumber bn = vnsWeb3j.ethBlockNumber().send();
//			Subscription subscription  = vnsWeb3j.transactionObservable().subscribe(tx ->{
//				System.out.println(tx.getNonce().longValue());
//				System.out.println(tx.getValue().longValue());
//			});
//			Subscription subscription = vnsWeb3j.catchUpToLatestAndSubscribeToNewBlocksObservable(DefaultBlockParameter.valueOf(BigInteger.ZERO), false)
//			        .subscribe(block -> {
//			        	System.out.println(block.getResult().getParentHash());
//			        	System.out.println(block.getResult().getHash());
//			        	
//			});
			Subscription subscription = vnsWeb3j.catchUpToLatestAndSubscribeToNewTransactionsObservable(
					DefaultBlockParameter.valueOf(BigInteger.ZERO))
			        .subscribe(tx -> {
			        	System.out.println(tx);
			});
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public static List<Type> decodeFunctionInput(String input) {
        List<Type> results = null;
        if (input.length() < 128) {
            return results;
        }
        results = FunctionReturnDecoder.decode(input.substring(input.length() - 128), Utils.convert(Arrays.asList(new TypeReference<Address>() {
        }, new TypeReference<Uint256>() {
        })));
        return results;
    }

}
